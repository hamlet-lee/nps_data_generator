/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.xinitek;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Random;

public class App {
    static DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
    static DateTimeFormatter outFormatter = DateTimeFormat.forPattern("yyyyMMdd_HHmmss");
    static DateTime minDt = formatter.parseDateTime("2020-01-01 00:00:00");
    static DateTime maxDt = formatter.parseDateTime("2020-02-28 23:59:59");
    static DateTime ver1_0_1_Dt = formatter.parseDateTime("2020-02-01 23:59:59");

    public static class User {
        private int seed;
        private Random random;
        private int id;
        public User(int seed, int id){
            this.seed = seed;
            this.id = id;
            random = new Random(seed);
        }
        public void run() {
            // 来的时间
            long cPos = Math.abs(random.nextLong() % (maxDt.getMillis() - minDt.getMillis()));
            DateTime comeDt = new DateTime(minDt.getMillis() + cPos);
            long gPos = Math.abs(random.nextLong() % (maxDt.getMillis() - comeDt.getMillis()));
            DateTime goneDt = new DateTime(comeDt.getMillis() + gPos);
            // 用了多少天
            DateTime curDt = new DateTime(comeDt);

            // 开始的版本
            String curVersion = null;
            if(curDt.compareTo(ver1_0_1_Dt) <= 0) {
                curVersion = "1.0.0";
            } else {
                curVersion = "1.0.1";
            }

            String[] eventIds = {"score", "score_nps", "event_a", "event_b"};

            int num = 0;
            while(true) {
//                if( num % 100 == 0) {
//                    try {
//                        Thread.sleep(100);
//                    } catch (InterruptedException e) {
//                        e.printStackTrace();
//                    }
//                }
                float f = random.nextFloat();
                boolean mayUpdateGap = false;
                if( f > 0.95) {
                    // big gap: 0~10 days
                    mayUpdateGap = true;
                    curDt = curDt.plus(Math.abs(random.nextLong() % (3600 * 1000 * 24 * 10) ));
                } else if (f > 0.90){
                    // mid gap: 0~10 hours
                    mayUpdateGap = true;
                    curDt = curDt.plus(Math.abs(random.nextLong() % (3600 * 1000 * 10) ));
                } else {
                    // small gap: 0~10 secs
                    curDt = curDt.plus(Math.abs(random.nextLong() % (1000 * 10) ));
                }

                if( curDt.getMillis() > goneDt.getMillis() ) {
                    break;
                }

                // 是否要升级
                if( mayUpdateGap && curDt.compareTo(ver1_0_1_Dt) > 0 && random.nextFloat() > 0.8) {
                    curVersion = "1.0.1";
                }

                // event id
                String eventId = eventIds[random.nextInt(eventIds.length)];
                if(eventId.equals("score")) {
                    out(curDt, id, curVersion, eventId, "score", random.nextInt(10) + ".0");
                }else if(eventId.equals("score_nps")) {
                    out(curDt, id, curVersion, eventId, "nps", random.nextInt(10) + "");
                }else if(eventId.equals("event_a")) {
                    out(curDt, id, curVersion, eventId, "a_val", random.nextInt(10000) + "");
                }else {
                    out(curDt, id, curVersion, eventId, "b_val", random.nextInt(1000) + "");
                }

            }
        }
    }

    static Random random = new Random(1);
    private static void out(DateTime curDt, int userId, String curVersion, String eventId, String key, String val) {
        if(random.nextBoolean()) {
            // 次序1
            ps.println(outFormatter.print(curDt) + "\tEVENT\tver=" + curVersion + "\tevent_id=" + eventId + "\t"
                    + "userid=user" + userId + "\t" + key + "=" + val);
        } else if(random.nextBoolean()){
            // 次序2
            ps.println(outFormatter.print(curDt) + "\tEVENT\tver=" + curVersion + "\t"
                    + key + "=" + val + "\tevent_id=" + eventId + "\t"
                    + "userid=user" + userId);
        } else {
            // 次序3
            ps.println(outFormatter.print(curDt) + "\tEVENT\tver=" + curVersion + "\t"
                    + key + "=" + val + "\t"
                    + "userid=user" + userId + "\tevent_id=" + eventId);
        }
    }
    static PrintStream ps = null;
    public static void main(String[] args) throws FileNotFoundException {
        int numOfUser = 10000;
        ps = new PrintStream("nps_data.txt");
        for(int i=0; i<numOfUser; i++) {
            User user = new User(i, i);
            user.run();
        }
        ps.close();
    }
}
